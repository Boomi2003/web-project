{"version":3,"sources":["index.js"],"names":["express","require","mongoose","EmployeeModel","app","use","cors","connect","then","log","req","res","_req$body","body","password","email","user","console","json","create","employees","err","post","regeneratorRuntime","async","_context","prev","next","title","awrap","ElistModel","findOne","sent","send","status","stop","get","_context2","find","t0","error","listen"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,WAClBC,SAAWD,QAAQ,YADnBD,KAAOC,QAAU,QAGjBE,cAAgBF,QAAQ,iBAFxBC,WAAWD,QAAQ,yBAMnBG,IAAMJ,UAJZI,IAAMD,IAAAA,QAAAA,QAMNC,IAAIC,IAAIC,QAERJ,SAASK,QAAQ,kCAJjBC,KAAMJ,WAAAA,OAAMJ,QAAOS,IAAnB,uBAEAL,IAAIC,KAAIC,SAAR,SAAAI,EAAAC,GAAA,IAAAC,EAEiBF,EAAAG,KAARN,EAFTK,EAESL,MAAQO,EAFjBF,EAEiBE,SACXX,cAAYM,QAAI,CAAAM,MAAAA,IADtBP,KAAA,SAAAQ,GAGAC,QAASR,IAAUO,GAAcA,EAAAA,EAAAF,WAAAA,EAAAH,EAAAO,KAAA,WAEEH,EAAAA,KAAAA,6BAUvBJ,EAAIO,KAAK,yBAHLP,IAAAA,KAAAA,YAAS,SAAAD,EAAAC,GACZR,cAAAgB,OAAAT,EAAAG,MALLL,KAAA,SAAAY,GAMK,OAAAT,EAAAO,KAAAE,KADA,MAEGF,SAAAA,GAAJ,OAASP,EAAAO,KAAAG,OAGpBjB,IAfDkB,KAAA,gBAAA,SAAAZ,EAAAC,GAAA,IAAAI,EAAA,OAAAQ,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAiBAZ,EAASL,EAAAG,KAAae,MAjBtBH,EAAAE,KAAA,EAAAJ,mBAAAM,MAkBIC,WACMC,QAAAX,IAnBV,KAAA,EAAAK,EAAAO,KAkBIrB,EAAAsB,KAEO,kBAFPH,WAAAX,OAAAT,EAAAG,MADJL,KAAA,SAAAY,GAAA,OAAAT,EAAAuB,OAAA,KAAAhB,KAAAE,KACI,MAKK,SAAAC,GAAA,OAAgBV,EAAAuB,OAAA,KAAAhB,KAAAG,KAvBzB,KAAA,EAAA,IAAA,MAAA,OAAAI,EAAAU,YAuByB/B,IAAAgC,IAAA,gBAAA,SAAA1B,EAAAC,GAAA,IAAAS,EAAA,OAAAG,mBAAAC,MAAA,SAAAa,GAAA,OAAA,OAAAA,EAAAX,KAAAW,EAAAV,MAAA,KAAA,EAAA,OAAAU,EAAAX,KAAA,EAAAW,EAAAV,KAAA,EAAAJ,mBAAAM,MAAAC,WAAAQ,KAAA,KAAA,KAAA,EAAAlB,EAAAiB,EAAAL,KACjBjB,QADiBN,IACVC,GADUC,EAAAsB,KAAAb,GAAAiB,EAAAV,KAAA,GAAA,MAAA,KAAA,EAAAU,EAAAX,KAAA,EAAAW,EAAAE,GAAAF,EAAA,MAAA,GAiBjBpB,QAAQuB,MAAM,eAAdH,EAAAE,IAjBiB,KAAA,GAAA,IAAA,MAAA,OAAAF,EAAAF,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAKpB/B,IAAAqC,OAFD,KAEK,WACDX,QAAAA,IAAAA","file":"index.min.js","sourcesContent":["const express = require(\"express\")\r\nconst mongoose = require(\"mongoose\")\r\nconst cors = require(\"cors\")\r\nconst EmployeeModel = require(\"./models/User\")\r\nconst ElistModel = require(\"./models/EmployeeList\")\r\n\r\n\r\nconst app = express()\r\napp.use(express.json())\r\napp.use(cors())\r\n\r\nmongoose.connect(\"mongodb://127.0.0.1:27017/User\")\r\n.then(()=>console.log('mongodb connected'))\r\n\r\napp.post(\"/login\", (req, res) => {\r\n    const {email, password} = req.body;\r\n    EmployeeModel.findOne({email : email})\r\n    .then(user => {\r\n        console.log(user)\r\n        if(user) {\r\n            if(user.password === password){\r\n                res.json(\"Success\")\r\n            }else{\r\n                res.json(\"The password is incorrect\")\r\n            }\r\n        }else{\r\n            res.json(\"No record existed\")\r\n        }\r\n    })\r\n})\r\n\r\napp.post(\"/register\", (req, res) => {\r\n    EmployeeModel.create(req.body)\r\n    .then(employees => res.json(employees))\r\n    .catch(err => res.json(err))\r\n})\r\n\r\napp.post('/employeelist',async(req,res)=>{\r\n    var email= req.body.title\r\n    const existingUser = await ElistModel.findOne(email);\r\n    if(existingUser){\r\n        res.send('already exists')\r\n    }else{\r\n        ElistModel.create(req.body)\r\n            .then(employees => res.status(201).json(employees))\r\n            .catch(err => res.status(500).json(err));\r\n    }  \r\n})\r\napp.get ('/employeelist',async(req,res)=>{\r\n    try{\r\n        const employees = await ElistModel.find({})\r\n        console.log(employees)\r\n        res.send(employees) \r\n    }catch(err){\r\n        console.error('Err fetching',err)\r\n    }\r\n})\r\n// app.get(\"/username\",async(req,res)=>{\r\n//     console.log(req.user.id)\r\n// })\r\napp.listen(3001, () => {\r\n    console.log(\"server is running\")\r\n})"]}