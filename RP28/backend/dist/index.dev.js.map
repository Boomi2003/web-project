{"version":3,"sources":["index.js"],"names":["express","require","mongoose","cors","EmployeeModel","ElistModel","app","use","json","connect","then","console","log","post","req","res","body","email","password","findOne","user","create","employees","err","title","existingUser","send","status","get","find","error","listen"],"mappings":"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","sourcesContent":["const express = require(\"express\")\r\nconst mongoose = require(\"mongoose\")\r\nconst cors = require(\"cors\")\r\nconst EmployeeModel = require(\"./models/User\")\r\nconst ElistModel = require(\"./models/EmployeeList\")\r\n\r\n\r\nconst app = express()\r\napp.use(express.json())\r\napp.use(cors())\r\n\r\nmongoose.connect(\"mongodb://127.0.0.1:27017/User\")\r\n.then(()=>console.log('mongodb connected'))\r\n\r\napp.post(\"/login\", (req, res) => {\r\n    const {email, password} = req.body;\r\n    EmployeeModel.findOne({email : email})\r\n    .then(user => {\r\n        console.log(user)\r\n        if(user) {\r\n            if(user.password === password){\r\n                res.json(\"Success\")\r\n            }else{\r\n                res.json(\"The password is incorrect\")\r\n            }\r\n        }else{\r\n            res.json(\"No record existed\")\r\n        }\r\n    })\r\n})\r\n\r\napp.post(\"/register\", (req, res) => {\r\n    EmployeeModel.create(req.body)\r\n    .then(employees => res.json(employees))\r\n    .catch(err => res.json(err))\r\n})\r\n\r\napp.post('/employeelist',async(req,res)=>{\r\n    var email= req.body.title\r\n    const existingUser = await ElistModel.findOne(email);\r\n    if(existingUser){\r\n        res.send('already exists')\r\n    }else{\r\n        ElistModel.create(req.body)\r\n            .then(employees => res.status(201).json(employees))\r\n            .catch(err => res.status(500).json(err));\r\n    }  \r\n})\r\napp.get ('/employeelist',async(req,res)=>{\r\n    try{\r\n        const employees = await ElistModel.find({})\r\n        console.log(employees)\r\n        res.send(employees) \r\n    }catch(err){\r\n        console.error('Err fetching',err)\r\n    }\r\n})\r\n// app.get(\"/username\",async(req,res)=>{\r\n//     console.log(req.user.id)\r\n// })\r\napp.listen(3001, () => {\r\n    console.log(\"server is running\")\r\n})"],"file":"index.dev.js"}